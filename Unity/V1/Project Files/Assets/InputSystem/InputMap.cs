//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputSystem/InputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMap"",
    ""maps"": [
        {
            ""name"": ""PaddleInput"",
            ""id"": ""4df801e0-4f95-4555-8939-afcd765d4368"",
            ""actions"": [
                {
                    ""name"": ""leftUp"",
                    ""type"": ""Button"",
                    ""id"": ""14f4b930-fda4-4397-88df-a0377eb67c9b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""leftDown"",
                    ""type"": ""Button"",
                    ""id"": ""433769fc-aa51-4bb5-b089-a5ed5c6f16b7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""rightUp"",
                    ""type"": ""Button"",
                    ""id"": ""fd67cbb0-9be7-4beb-acd8-78f8eb8c5f80"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""rightDown"",
                    ""type"": ""Button"",
                    ""id"": ""9721a452-e634-4df8-8a14-6296d7832a06"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f70d31f8-164b-43f2-84cf-2f32e8e1118d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""leftUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""871de815-89a5-4cb2-aaca-5546ed196592"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""leftDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2281abc0-4200-4caa-aa9e-48bf9b5a0e00"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rightUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea5a8cb2-7fcf-41ec-a115-561d571d2221"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rightDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New Control Scheme"",
            ""bindingGroup"": ""New Control Scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PaddleInput
        m_PaddleInput = asset.FindActionMap("PaddleInput", throwIfNotFound: true);
        m_PaddleInput_leftUp = m_PaddleInput.FindAction("leftUp", throwIfNotFound: true);
        m_PaddleInput_leftDown = m_PaddleInput.FindAction("leftDown", throwIfNotFound: true);
        m_PaddleInput_rightUp = m_PaddleInput.FindAction("rightUp", throwIfNotFound: true);
        m_PaddleInput_rightDown = m_PaddleInput.FindAction("rightDown", throwIfNotFound: true);
    }

    ~@InputMap()
    {
        UnityEngine.Debug.Assert(!m_PaddleInput.enabled, "This will cause a leak and performance issues, InputMap.PaddleInput.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PaddleInput
    private readonly InputActionMap m_PaddleInput;
    private List<IPaddleInputActions> m_PaddleInputActionsCallbackInterfaces = new List<IPaddleInputActions>();
    private readonly InputAction m_PaddleInput_leftUp;
    private readonly InputAction m_PaddleInput_leftDown;
    private readonly InputAction m_PaddleInput_rightUp;
    private readonly InputAction m_PaddleInput_rightDown;
    public struct PaddleInputActions
    {
        private @InputMap m_Wrapper;
        public PaddleInputActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @leftUp => m_Wrapper.m_PaddleInput_leftUp;
        public InputAction @leftDown => m_Wrapper.m_PaddleInput_leftDown;
        public InputAction @rightUp => m_Wrapper.m_PaddleInput_rightUp;
        public InputAction @rightDown => m_Wrapper.m_PaddleInput_rightDown;
        public InputActionMap Get() { return m_Wrapper.m_PaddleInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PaddleInputActions set) { return set.Get(); }
        public void AddCallbacks(IPaddleInputActions instance)
        {
            if (instance == null || m_Wrapper.m_PaddleInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PaddleInputActionsCallbackInterfaces.Add(instance);
            @leftUp.started += instance.OnLeftUp;
            @leftUp.performed += instance.OnLeftUp;
            @leftUp.canceled += instance.OnLeftUp;
            @leftDown.started += instance.OnLeftDown;
            @leftDown.performed += instance.OnLeftDown;
            @leftDown.canceled += instance.OnLeftDown;
            @rightUp.started += instance.OnRightUp;
            @rightUp.performed += instance.OnRightUp;
            @rightUp.canceled += instance.OnRightUp;
            @rightDown.started += instance.OnRightDown;
            @rightDown.performed += instance.OnRightDown;
            @rightDown.canceled += instance.OnRightDown;
        }

        private void UnregisterCallbacks(IPaddleInputActions instance)
        {
            @leftUp.started -= instance.OnLeftUp;
            @leftUp.performed -= instance.OnLeftUp;
            @leftUp.canceled -= instance.OnLeftUp;
            @leftDown.started -= instance.OnLeftDown;
            @leftDown.performed -= instance.OnLeftDown;
            @leftDown.canceled -= instance.OnLeftDown;
            @rightUp.started -= instance.OnRightUp;
            @rightUp.performed -= instance.OnRightUp;
            @rightUp.canceled -= instance.OnRightUp;
            @rightDown.started -= instance.OnRightDown;
            @rightDown.performed -= instance.OnRightDown;
            @rightDown.canceled -= instance.OnRightDown;
        }

        public void RemoveCallbacks(IPaddleInputActions instance)
        {
            if (m_Wrapper.m_PaddleInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPaddleInputActions instance)
        {
            foreach (var item in m_Wrapper.m_PaddleInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PaddleInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PaddleInputActions @PaddleInput => new PaddleInputActions(this);
    private int m_NewControlSchemeSchemeIndex = -1;
    public InputControlScheme NewControlSchemeScheme
    {
        get
        {
            if (m_NewControlSchemeSchemeIndex == -1) m_NewControlSchemeSchemeIndex = asset.FindControlSchemeIndex("New Control Scheme");
            return asset.controlSchemes[m_NewControlSchemeSchemeIndex];
        }
    }
    public interface IPaddleInputActions
    {
        void OnLeftUp(InputAction.CallbackContext context);
        void OnLeftDown(InputAction.CallbackContext context);
        void OnRightUp(InputAction.CallbackContext context);
        void OnRightDown(InputAction.CallbackContext context);
    }
}
